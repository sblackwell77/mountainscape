@author Seven Blackwell
// live love code

import pygame
import numpy as np
from pygame.locals import *


pygame.init()


pygame.mixer.init()

pygame.mixer.music.load('/Users/sevenblackwell/Downloads/Aphex twin - Xtal [ ezmp3.cc ].mp3')  
pygame.mixer.music.play(-1)  

// set fullscreen
screen = pygame.display.set_mode((0, 0), pygame.FULLSCREEN)
width, height = screen.get_size() 

pygame.display.set_caption("3D Environment with 5 Layers of White Cubes and Background")

// bkgrnd image
background_image = pygame.image.load('/Users/sevenblackwell/Downloads/recipe-page-main/mntn.jpg')  
background_image = pygame.transform.scale(background_image, (width, height))  

//color of boxes
WHITE = (255, 255, 255)  


camera_pos = np.array([0, 0, -15], dtype=np.float32)  
camera_rot = np.array([0, 0], dtype=np.float32)  

//fov settings
fov = np.pi / 3 
aspect_ratio = width / height
near_plane = 0.1
far_plane = 100

//3d perspective 
def perspective_matrix(fov, aspect, near, far):
    f = 1.0 / np.tan(fov / 2.0)
    return np.array([
        [f / aspect, 0, 0, 0],
        [0, f, 0, 0],
        [0, 0, (far + near) / (near - far), (2 * far * near) / (near - far)],
        [0, 0, -1, 0]
    ])

projection = perspective_matrix(fov, aspect_ratio, near_plane, far_plane)

//3d points in 2d space
def project(vertex):
    vertex = np.append(vertex, 1)
    projected_vertex = projection @ vertex
    projected_vertex /= projected_vertex[3]  
    return projected_vertex[:2]

//vertices and edges
cube_vertices = np.array([
    [-1, -1, -1],
    [1, -1, -1],
    [1, 1, -1],
    [-1, 1, -1],
    [-1, -1, 1],
    [1, -1, 1],
    [1, 1, 1],
    [-1, 1, 1]
])

cube_edges = [
    (0, 1), (1, 2), (2, 3), (3, 0),  
    (4, 5), (5, 6), (6, 7), (7, 4),  
    (0, 4), (1, 5), (2, 6), (3, 7)  
]

//how 2 move cam
def move_camera(keys, dt):
    global camera_pos, camera_rot
    speed = 10 * dt 
    if keys[K_w]: 
        camera_pos[2] += np.cos(camera_rot[0]) * speed
        camera_pos[0] += np.sin(camera_rot[0]) * speed
    if keys[K_s]: 
        camera_pos[2] -= np.cos(camera_rot[0]) * speed
        camera_pos[0] -= np.sin(camera_rot[0]) * speed
    if keys[K_a]:  
        camera_pos[2] += np.sin(camera_rot[0]) * speed
        camera_pos[0] -= np.cos(camera_rot[0]) * speed
    if keys[K_d]:  
        camera_pos[2] -= np.sin(camera_rot[0]) * speed
        camera_pos[0] += np.cos(camera_rot[0]) * speed
    if keys[K_q]: 
        camera_pos[1] += speed
    if keys[K_e]: 
        camera_pos[1] -= speed

def rotate_camera(keys, dt):
    global camera_rot
    rotation_speed = 2 * dt  
    if keys[K_LEFT]:
        camera_rot[0] += rotation_speed 
    if keys[K_RIGHT]:
        camera_rot[0] -= rotation_speed 
    if keys[K_UP]:
        camera_rot[1] -= rotation_speed  
    if keys[K_DOWN]:
        camera_rot[1] += rotation_speed  

// 5 layers
grid_size = 3 
layer_distance = 10  
cube_positions = []

for layer in range(5):  
    z_offset = layer * layer_distance  
    cube_positions.extend([(i * 4, j * 4, -z_offset) for i in range(-grid_size, grid_size) for j in range(-grid_size, grid_size)])

def rotation_matrix_y(angle):
    cos_theta = np.cos(angle)
    sin_theta = np.sin(angle)
    return np.array([
        [cos_theta, 0, sin_theta],
        [0, 1, 0],
        [-sin_theta, 0, cos_theta]
    ])
// main
running = True
clock = pygame.time.Clock()
angle = 0 

while running:
    dt = clock.tick(60) / 1000.0  
    angle += np.pi * dt / 4 

    screen.blit(background_image, (0, 0)) 

    for event in pygame.event.get():
        if event.type == QUIT:
            running = False

    keys = pygame.key.get_pressed()
// move on input
    move_camera(keys, dt)
    rotate_camera(keys, dt)

    cos_yaw, sin_yaw = np.cos(camera_rot[0]), np.sin(camera_rot[0])
    cos_pitch, sin_pitch = np.cos(camera_rot[1]), np.sin(camera_rot[1])
// make rotation matrix for cubes
    camera_rotation_matrix = np.array([
        [cos_yaw, 0, -sin_yaw],
        [sin_yaw * sin_pitch, cos_pitch, cos_yaw * sin_pitch],
        [sin_yaw * cos_pitch, -sin_pitch, cos_yaw * cos_pitch]
    ])

    for pos in cube_positions:
        cube_offset = np.array(pos)

        cube_rotation = rotation_matrix_y(angle)

        for edge in cube_edges:
// move relative to camera etc
            points = []
            for vertex in edge:
                v = cube_rotation @ cube_vertices[vertex]  
                v = camera_rotation_matrix @ (v + cube_offset - camera_pos)  
                if v[2] > 0: 
                    p = project(v) * np.array([width / 2, height / 2]) + np.array([width / 2, height / 2])
                    points.append(p)

            if len(points) == 2:
                pygame.draw.line(screen, WHITE, points[0], points[1], 2)

  
    pygame.display.flip()


pygame.quit()
